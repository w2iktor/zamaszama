swagger: '2.0'
info:
  title: Zamaszama Api
  description: The easiest way to order food anywhere you are
  version: "1.0.0"
host: "localhost:3000"
schemes:
  - https
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
paths:

  /login:
    x-swagger-router-controller: authentication
    post:
      operationId: login
      summary: User authorization and create token
      description: |
        Return token used by the client with each request made to the server. If token is not valid the response will be 401.
      parameters:
        - name: credencials
          in: body
          description: User login
          required: true
          schema:
            $ref: '#/definitions/Credencial'
      tags:
        - Authentication
      responses:
        200:
          description: Successful request.
          schema:
            $ref: "#/definitions/UserSessionInfo"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /logout:
    x-swagger-router-controller: authentication
    get:
      operationId: logout
      summary: Close the user session. Invalidate token
      description: Session saved on server side will be removed. Token will be no longer valid.
      tags:
        - Authentication
      responses:
        200:
          description: Successful logout.
          schema:
            properties:
              message:
                type: string
                description: User has been successfully logged out
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /password:
      put:
        summary: Update password of current user
        description: |
          Update password of current user.
        parameters:
          - name: password
            in: body
            description: User password
            required: true
            schema:
              properties:
                password:
                  type: string
                  description: New user password.
        tags:
          - Authentication
        responses:
          200:
            description: Successful request.
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'

  /meals:
    x-swagger-router-controller: Meal
    get:
      operationId: readAllMeals
      summary: Retrive all meals
      description: Retrive all meals
      responses:
        200:
          description: List of all meals
          schema:
            properties:
              meals:
                type: array
                items:
                  $ref: '#/definitions/Meal'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
      tags:
        - Meals
        
  /admin/meals:
    x-swagger-router-controller: Meal
    get:
      operationId: readAllMeals
      summary: Retrive all meals
      description: Retrive all meals
      responses:
        200:
          description: List of all meals
          schema:
            properties:
              meals:
                type: array
                items:
                  $ref: '#/definitions/Meal'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
      tags:
        - Meals
    post:
      operationId: create
      summary: Create meal
      description: Create meal. Meals id is set by application and return in response object
      parameters:
        - name: meal
          in: body
          description: Meal
          required: true
          schema:
            $ref: '#/definitions/Meal'
      tags:
        - Meals
      responses:
        200:
          description: Successful meal create request.
          schema:
            $ref: '#/definitions/Meal'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /admin/meals/{mealId}:
    x-swagger-router-controller: Meal
    get:
      operationId: readMeal
      summary: Retrive all meals
      description: Retrive all meals
      parameters:
        - name: mealId
          in: path
          type: string
      responses:
        200:
          description: List of all meals
          schema:
            properties:
              meals:
                type: array
                items:
                  $ref: '#/definitions/Meal'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
      tags:
        - Meals
    put:
      operationId: update
      summary: Update existing meal
      description: |
        Update meal data.
      parameters:
        - name: mealId
          in: path
          type: string
        - name: meal
          in: body
          description: Meal data
          required: true
          schema:
            $ref: '#/definitions/Meal'
      tags:
        - Meals
      responses:
        200:
          description: Successful request.
          schema:
            $ref: '#/definitions/Meal'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: delete
      summary: Delete existing meal
      description: |
        Delete meal data.
      parameters:
        - name: mealId
          in: path
          type: string
      tags:
        - Meals
      responses:
        200:
          description: Successful request.
          schema:
            $ref: '#/definitions/Meal'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /currentOrder:
    x-swagger-router-controller: UserOrder
    get:
      operationId: read
      summary: Retrive users current order
      description: Retrive users current order
      responses:
        200:
          description: User current order
          schema:
            $ref: '#/definitions/Order'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User order
    post:
      operationId: create
      summary: Create current user order
      description: |
        Create current user order if such order do not exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
      tags:
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: update
      summary: Create current user order
      description: |
        Update current user order if such order exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
      tags:
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: delete
      summary: Delete current user order
      description: |
        Delete current user order if such exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
      tags:
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /admin/users:
    x-swagger-router-controller: user
    get:
      operationId: list
      summary: Retrive all system users
      description: Retrive users saved in database
      responses:
        200:
          description: List of current users
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
            tags:
              - Users
              - Admin
    post:
      operationId: create
      summary: Create new user
      description: |
        Create new user.
      parameters:
        - name: user
          in: body
          description: User data
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      tags:
        - Users
        - Admin
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /admin/users/{email}:
    x-swagger-router-controller: user
    get:
      operationId: read
      summary: Retrive user by email
      description: Retrive user saved in database
      parameters:
        - name: email
          in: path
          type: string
      responses:
        200:
          description: User object
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users
        - Admin
    put:
      operationId: update
      summary: Update existing user
      description: |
        Update user data.
      parameters:
        - name: email
          in: path
          type: string
        - name: user
          in: body
          description: User data
          required: true
          schema:
            $ref: '#/definitions/UserForUpdate'
      tags:
        - Users
        - Admin
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: delete
      summary: Delete existing user
      description: |
        Delete user data.
      parameters:
        - name: email
          in: path
          type: string
      tags:
        - Users
        - Admin
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /admin/users/{email}/password:
      put:
        summary: Update password of user with specific email
        description: |
          Update password of user with email given as apram.
        parameters:
          - name: password
            in: body
            description: User password
            required: true
            schema:
              properties:
                password:
                  type: string
                  description: New user password.
          - name: email
            in: path
            required: true
            type: string
        tags:
          - Authentication
          - Admin
        responses:
          200:
            description: Successful request.
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'

  /admin/users/{email}/currentOrder:
    get:
      summary: Retrive user current order
      description: Retrive users current order
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        200:
          description: User current order
          schema:
            $ref: '#/definitions/Order'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User order
    post:
      summary: Create current user order
      description: |
        Create current user order if such order do not exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
        - name: email
          in: path
          required: true
          type: string
      tags:
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Create current user order
      description: |
        Update current user order if such order exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
        - name: email
          in: path
          required: true
          type: string
      tags:
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete current user order
      description: |
        Delete current user order if such exists.
      parameters:
        - name: order
          in: body
          description: User order
          required: true
          schema:
            $ref: '#/definitions/Order'
        - name: email
          in: path
          required: true
          type: string
      tags:
        - User order
        - Admin
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /admin/users/{email}/orders:
    get:
      summary: Retrive all orders of the user
      description: Retrive all orders for user with given email
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        200:
          description: List of all user orders
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/Order'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
            tags:
              - User order
              - Admin

  /admin/users/{date}/summary:
    get:
      summary: Retrive summary of orders from specific date
      description: Retrive summary of orders for specific date. The orders will be aggregated by meal name and type in order to help order food via phone.
      parameters:
        - name: date
          in: path
          required: true
          type: string
          format: date
      responses:
        200:
          description: List of orders for specific date
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/Order'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
            tags:
              - User order
              - Admin

  /admin/orders/{date}:
    x-swagger-router-controller: AdminOrder
    get:
      operationId: getByDate
      summary: Retrive orders from specific date
      description: Retrive orders for specific date
      parameters:
        - name: date
          in: path
          required: true
          type: string
          format: date
      responses:
        200:
          description: List of orders for specific date
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/Order'
                  minItems: 0
                  uniqueItems: true
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
            tags:
              - User order
              - Admin

  /admin/orders/lock:
    post:
      operationId: ordersLock
      summary: Lock ordering food
      description: |
        This action will disallow to order food for current day. The purpose of this action is to disable food ordering when the order time is out.
      tags:
        - Admin
        - User order
      responses:
        200:
          description: Successful request.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:

  UserForUpdate:
    properties:
      name:
        type: string
        desciption: Logged user name
      role:
        type: string
        enum:
          - USER
          - ADMIN
        description: user role
      password:
        type: string
        description: password
      needChangePassword:
        type: boolean
        description: Need change password

  Credencial:
    required:
      - login
      - password
    properties:
      login:
        type: string
        desciption: Login
      password:
        type: string
        description: Password

  UserSessionInfo:
    properties:
      name:
        type: string
        desciption: Logged user name
      email:
        type: string
        description: Email
      role:
        type: string
        enum:
          - USER
          - ADMIN
        description: user role
      token:
        type: string
        description: token
      needChangePassword:
        type: boolean
        description: Need change password

  NewUser:
    properties:
      name:
        type: string
        description: Name
      email:
        type: string
        description: Email
      password: 
        type: string
        description: Password
  
  User:
    properties:
      name:
        type: string
        description: Name.
      email:
        type: string
        description: Email.
      needChangePassword:
        type: boolean
        description: Need change password.

  Order:
    properties:
      userLogin:
        type: string
        description: user login
      date:
        type: string
        format: date
        description: Date.
      meals:
        type: array
        items:
          $ref: '#/definitions/OrderDetail'
          minItems: 0
          uniqueItems: true

  OrderDetail:
    required:
    - amount
    - meal
    properties:
      amount:
        type: number
      meal:
        type: string
        desription: Meal ID

  Meal:
    properties:
      type:
        type: string
        description: Type.
      name:
        type: string
        description: Name.
      price:
        type: number
        description: Meal price.
      company:
        type: string
        description: Company.
      _id:
        type: string
        description: Meal id

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
